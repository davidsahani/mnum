from __future__ import annotations

import typing

import mnum

__all__ = [
    "mnum"
]


class mnum():
    @typing.overload
    def __init__(self, number: int) -> None: ...
    @typing.overload
    def __init__(self, number: float) -> None: ...
    @typing.overload
    def __init__(self, number: str) -> None: ...
    @typing.overload
    def __init__(self, number: mnum) -> None: ...
    def __bool__(self) -> bool: ...
    @typing.overload
    def __eq__(self, value: int) -> bool: ...
    @typing.overload
    def __eq__(self, value: float) -> bool: ...
    @typing.overload
    def __eq__(self, value: str) -> bool: ...
    @typing.overload
    def __eq__(self, value: mnum) -> bool: ...
    @typing.overload
    def __ne__(self, value: int) -> bool: ...
    @typing.overload
    def __ne__(self, value: float) -> bool: ...
    @typing.overload
    def __ne__(self, value: str) -> bool: ...
    @typing.overload
    def __ne__(self, value: mnum) -> bool: ...
    @typing.overload
    def __lt__(self, value: int) -> bool: ...
    @typing.overload
    def __lt__(self, value: float) -> bool: ...
    @typing.overload
    def __lt__(self, value: str) -> bool: ...
    @typing.overload
    def __lt__(self, value: mnum) -> bool: ...
    @typing.overload
    def __le__(self, value: int) -> bool: ...
    @typing.overload
    def __le__(self, value: float) -> bool: ...
    @typing.overload
    def __le__(self, value: str) -> bool: ...
    @typing.overload
    def __le__(self, value: mnum) -> bool: ...
    @typing.overload
    def __gt__(self, value: int) -> bool: ...
    @typing.overload
    def __gt__(self, value: float) -> bool: ...
    @typing.overload
    def __gt__(self, value: str) -> bool: ...
    @typing.overload
    def __gt__(self, value: mnum) -> bool: ...
    @typing.overload
    def __ge__(self, value: int) -> bool: ...
    @typing.overload
    def __ge__(self, value: float) -> bool: ...
    @typing.overload
    def __ge__(self, value: str) -> bool: ...
    @typing.overload
    def __ge__(self, value: mnum) -> bool: ...
    @typing.overload
    def __contains__(self, value: int) -> bool: ...
    @typing.overload
    def __contains__(self, value: float) -> bool: ...
    @typing.overload
    def __contains__(self, value: str) -> bool: ...
    @typing.overload
    def __contains__(self, value: mnum) -> bool: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __pos__(self) -> mnum: ...
    def __neg__(self) -> mnum: ...
    def __abs__(self) -> mnum: ...
    @typing.overload
    def __add__(self, value: int) -> mnum: ...
    @typing.overload
    def __add__(self, value: float) -> mnum: ...
    @typing.overload
    def __add__(self, value: str) -> mnum: ...
    @typing.overload
    def __add__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __radd__(self, value: int) -> mnum: ...
    @typing.overload
    def __radd__(self, value: float) -> mnum: ...
    @typing.overload
    def __radd__(self, value: str) -> mnum: ...
    @typing.overload
    def __radd__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __sub__(self, value: int) -> mnum: ...
    @typing.overload
    def __sub__(self, value: float) -> mnum: ...
    @typing.overload
    def __sub__(self, value: str) -> mnum: ...
    @typing.overload
    def __sub__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __rsub__(self, value: int) -> mnum: ...
    @typing.overload
    def __rsub__(self, value: float) -> mnum: ...
    @typing.overload
    def __rsub__(self, value: str) -> mnum: ...
    @typing.overload
    def __rsub__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __mul__(self, value: int) -> mnum: ...
    @typing.overload
    def __mul__(self, value: float) -> mnum: ...
    @typing.overload
    def __mul__(self, value: str) -> mnum: ...
    @typing.overload
    def __mul__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __rmul__(self, value: int) -> mnum: ...
    @typing.overload
    def __rmul__(self, value: float) -> mnum: ...
    @typing.overload
    def __rmul__(self, value: str) -> mnum: ...
    @typing.overload
    def __rmul__(self, value: mnum) -> mnum: ...
    @typing.overload
    def div(self, value: int) -> mnum: ...
    @typing.overload
    def div(self, value: float) -> mnum: ...
    @typing.overload
    def div(self, value: str) -> mnum: ...
    @typing.overload
    def div(self, value: mnum) -> mnum: ...
    @typing.overload
    def idiv(self, value: int) -> mnum: ...
    @typing.overload
    def idiv(self, value: float) -> mnum: ...
    @typing.overload
    def idiv(self, value: str) -> mnum: ...
    @typing.overload
    def idiv(self, value: mnum) -> mnum: ...
    @typing.overload
    def __floordiv__(self, value: int) -> mnum: ...
    @typing.overload
    def __floordiv__(self, value: float) -> mnum: ...
    @typing.overload
    def __floordiv__(self, value: str) -> mnum: ...
    @typing.overload
    def __floordiv__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __rfloordiv__(self, value: int) -> mnum: ...
    @typing.overload
    def __rfloordiv__(self, value: float) -> mnum: ...
    @typing.overload
    def __rfloordiv__(self, value: str) -> mnum: ...
    @typing.overload
    def __rfloordiv__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __truediv__(self, value: int) -> mnum: ...
    @typing.overload
    def __truediv__(self, value: float) -> mnum: ...
    @typing.overload
    def __truediv__(self, value: str) -> mnum: ...
    @typing.overload
    def __truediv__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __rtruediv__(self, value: int) -> mnum: ...
    @typing.overload
    def __rtruediv__(self, value: float) -> mnum: ...
    @typing.overload
    def __rtruediv__(self, value: str) -> mnum: ...
    @typing.overload
    def __rtruediv__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __mod__(self, value: int) -> mnum: ...
    @typing.overload
    def __mod__(self, value: float) -> mnum: ...
    @typing.overload
    def __mod__(self, value: str) -> mnum: ...
    @typing.overload
    def __mod__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __rmod__(self, value: int) -> mnum: ...
    @typing.overload
    def __rmod__(self, value: float) -> mnum: ...
    @typing.overload
    def __rmod__(self, value: str) -> mnum: ...
    @typing.overload
    def __rmod__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __pow__(self, value: int) -> mnum: ...
    @typing.overload
    def __pow__(self, value: float) -> mnum: ...
    @typing.overload
    def __pow__(self, value: str) -> mnum: ...
    @typing.overload
    def __pow__(self, value: mnum) -> mnum: ...
    @typing.overload
    def __rpow__(self, value: int) -> mnum: ...
    @typing.overload
    def __rpow__(self, value: float) -> mnum: ...
    @typing.overload
    def __rpow__(self, value: str) -> mnum: ...
    @typing.overload
    def __rpow__(self, value: mnum) -> mnum: ...
    def __repr__(self) -> str: ...
    def float_str(self) -> str: ...
    def __len__(self) -> int: ...
    def int_len(self) -> int: ...
    def frac_len(self) -> int: ...
    def as_int(self) -> mnum: ...
    def as_float(self) -> mnum: ...
    def int_part(self) -> mnum: ...
    def frac_part(self) -> mnum: ...
    @typing.overload
    def add(self, value: int) -> mnum: ...
    @typing.overload
    def add(self, value: float) -> mnum: ...
    @typing.overload
    def add(self, value: str) -> mnum: ...
    @typing.overload
    def add(self, value: mnum) -> mnum: ...
    @typing.overload
    def join(self, value: int) -> None: ...
    @typing.overload
    def join(self, value: float) -> None: ...
    @typing.overload
    def join(self, value: str) -> None: ...
    @typing.overload
    def join(self, value: mnum) -> None: ...
    @typing.overload
    def find(self, value: int) -> int: ...
    @typing.overload
    def find(self, value: mnum) -> int: ...
    @typing.overload
    def rfind(self, value: int) -> int: ...
    @typing.overload
    def rfind(self, value: mnum) -> int: ...
    @typing.overload
    def index(self, value: int) -> int: ...
    @typing.overload
    def index(self, value: mnum) -> int: ...
    @typing.overload
    def count(self, value: int) -> int: ...
    @typing.overload
    def count(self, value: mnum) -> int: ...
    @typing.overload
    def insert(self, index: int, value: int) -> None: ...
    @typing.overload
    def insert(self, index: int, value: mnum) -> None: ...
    def geti(self, index: int) -> mnum | None: ...
    def getf(self, index: int) -> mnum | None: ...
    def __iter__(self) -> typing.Iterator[mnum]: ...
    def __getitem__(self, index: int) -> mnum: ...
    @typing.overload
    def __setitem__(self, index: int, value: int) -> None: ...
    @typing.overload
    def __setitem__(self, index: int, value: mnum) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def pop(self, index: int) -> mnum: ...
    def remove(self, value: int) -> None: ...
    def clear(self) -> None: ...
    def sort(self) -> None: ...
    def reverse(self) -> None: ...
    __hash__ = None
    pass
